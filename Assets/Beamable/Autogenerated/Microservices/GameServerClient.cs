//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Beamable.Server.Clients
{
    using System;
    using Beamable.Platform.SDK;
    using Beamable.Server;
    
    
    /// <summary> A generated client for <see cref="Beamable.Microservices.GameServer"/> </summary
    public sealed class GameServerClient : MicroserviceClient, Beamable.Common.IHaveServiceName
    {
        
        public GameServerClient(BeamContext context = null) : 
                base(context)
        {
        }
        
        public string ServiceName
        {
            get
            {
                return "GameServer";
            }
        }
        
        /// <summary>
        /// Call the GetStats method on the GameServer microservice
        /// <see cref="Beamable.Microservices.GameServer.GetStats"/>
        /// </summary>
        public Beamable.Common.Promise<string> GetStats()
        {
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            return this.Request<string>("GameServer", "GetStats", serializedFields);
        }
        
        /// <summary>
        /// Call the ShouldVerify method on the GameServer microservice
        /// <see cref="Beamable.Microservices.GameServer.ShouldVerify"/>
        /// </summary>
        public Beamable.Common.Promise<bool> ShouldVerify()
        {
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            return this.Request<bool>("GameServer", "ShouldVerify", serializedFields);
        }
        
        /// <summary>
        /// Call the SendPlaytime method on the GameServer microservice
        /// <see cref="Beamable.Microservices.GameServer.SendPlaytime"/>
        /// </summary>
        public Beamable.Common.Promise<string> SendPlaytime(string integrityToken, string payload, long userid)
        {
            object raw_integrityToken = integrityToken;
            object raw_payload = payload;
            object raw_userid = userid;
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            serializedFields.Add("integrityToken", raw_integrityToken);
            serializedFields.Add("payload", raw_payload);
            serializedFields.Add("userid", raw_userid);
            return this.Request<string>("GameServer", "SendPlaytime", serializedFields);
        }
        
        /// <summary>
        /// Call the WithdrawBitcoin method on the GameServer microservice
        /// <see cref="Beamable.Microservices.GameServer.WithdrawBitcoin"/>
        /// </summary>
        public Beamable.Common.Promise<string> WithdrawBitcoin(string username, string integrityToken)
        {
            object raw_username = username;
            object raw_integrityToken = integrityToken;
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            serializedFields.Add("username", raw_username);
            serializedFields.Add("integrityToken", raw_integrityToken);
            return this.Request<string>("GameServer", "WithdrawBitcoin", serializedFields);
        }
        
        /// <summary>
        /// Call the GetplayerStats method on the GameServer microservice
        /// <see cref="Beamable.Microservices.GameServer.GetplayerStats"/>
        /// </summary>
        public Beamable.Common.Promise<string> GetplayerStats(long useris)
        {
            object raw_useris = useris;
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            serializedFields.Add("useris", raw_useris);
            return this.Request<string>("GameServer", "GetplayerStats", serializedFields);
        }
        
        /// <summary>
        /// Call the IsItSupportedRegion method on the GameServer microservice
        /// <see cref="Beamable.Microservices.GameServer.IsItSupportedRegion"/>
        /// </summary>
        public Beamable.Common.Promise<string> IsItSupportedRegion(string ipAddress)
        {
            object raw_ipAddress = ipAddress;
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            serializedFields.Add("ipAddress", raw_ipAddress);
            return this.Request<string>("GameServer", "IsItSupportedRegion", serializedFields);
        }
        
        /// <summary>
        /// Call the CanSaveData method on the GameServer microservice
        /// <see cref="Beamable.Microservices.GameServer.CanSaveData"/>
        /// </summary>
        public Beamable.Common.Promise<bool> CanSaveData(long userid)
        {
            object raw_userid = userid;
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            serializedFields.Add("userid", raw_userid);
            return this.Request<bool>("GameServer", "CanSaveData", serializedFields);
        }
        
        /// <summary>
        /// Call the CheckCheating method on the GameServer microservice
        /// <see cref="Beamable.Microservices.GameServer.CheckCheating"/>
        /// </summary>
        public Beamable.Common.Promise<System.ValueTuple<bool, string>> CheckCheating(long userid, System.ValueTuple<string, string>[] properties)
        {
            object raw_userid = userid;
            object raw_properties = properties;
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            serializedFields.Add("userid", raw_userid);
            serializedFields.Add("properties", raw_properties);
            return this.Request<System.ValueTuple<bool, string>>("GameServer", "CheckCheating", serializedFields);
        }
        
        /// <summary>
        /// Call the checkingCountryCode method on the GameServer microservice
        /// <see cref="Beamable.Microservices.GameServer.checkingCountryCode"/>
        /// </summary>
        public Beamable.Common.Promise<System.ValueTuple<bool, string>> checkingCountryCode(long userid, string countrycodeapi)
        {
            object raw_userid = userid;
            object raw_countrycodeapi = countrycodeapi;
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            serializedFields.Add("userid", raw_userid);
            serializedFields.Add("countrycodeapi", raw_countrycodeapi);
            return this.Request<System.ValueTuple<bool, string>>("GameServer", "checkingCountryCode", serializedFields);
        }
        
        /// <summary>
        /// Call the checkingtimezone method on the GameServer microservice
        /// <see cref="Beamable.Microservices.GameServer.checkingtimezone"/>
        /// </summary>
        public Beamable.Common.Promise<System.ValueTuple<bool, string>> checkingtimezone(long userid, string timezoneapi)
        {
            object raw_userid = userid;
            object raw_timezoneapi = timezoneapi;
            System.Collections.Generic.Dictionary<string, object> serializedFields = new System.Collections.Generic.Dictionary<string, object>();
            serializedFields.Add("userid", raw_userid);
            serializedFields.Add("timezoneapi", raw_timezoneapi);
            return this.Request<System.ValueTuple<bool, string>>("GameServer", "checkingtimezone", serializedFields);
        }
    }
    
    internal sealed class MicroserviceParametersGameServerClient
    {
        
        [System.SerializableAttribute()]
        internal sealed class ParameterSystem_String : MicroserviceClientDataWrapper<string>
        {
        }
        
        [System.SerializableAttribute()]
        internal sealed class ParameterSystem_Int64 : MicroserviceClientDataWrapper<long>
        {
        }
        
        [System.SerializableAttribute()]
        internal sealed class ParameterSystem_Array_System_ValueTuple_System_String_System_String : MicroserviceClientDataWrapper<System.ValueTuple<string, string>[]>
        {
        }
    }
    
    [BeamContextSystemAttribute()]
    public static class ExtensionsForGameServerClient
    {
        
        [Beamable.Common.Dependencies.RegisterBeamableDependenciesAttribute()]
        public static void RegisterService(Beamable.Common.Dependencies.IDependencyBuilder builder)
        {
            builder.AddScoped<GameServerClient>();
        }
        
        public static GameServerClient GameServer(this Beamable.Server.MicroserviceClients clients)
        {
            return clients.GetClient<GameServerClient>();
        }
    }
}
